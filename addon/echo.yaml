# I2S Audio configuration for ATOM Echo
i2s_audio:
  - id: i2s_audio_bus
    i2s_lrclk_pin: GPIO33
    i2s_bclk_pin: GPIO19
    i2s_mclk_pin: GPIO0

# Audio ADC configuration for external microphone
audio_adc:
  - id: adc
    i2s_audio_id: i2s_audio_bus
    i2s_din_pin: GPIO23

# Audio DAC configuration for external speaker
audio_dac:
  - id: dac
    i2s_audio_id: i2s_audio_bus
    i2s_dout_pin: GPIO22

# Microphone configuration
microphone:
  - platform: i2s_audio
    id: echo_microphone
    adc: adc
    pdm: true
    channel: left
    sample_rate: 16000
    bits_per_sample: 16bit

# Speaker configuration
speaker:
  - platform: i2s_audio
    id: echo_speaker
    dac: dac
    sample_rate: 16000
    bits_per_sample: 16bit
    channel: mono
    timeout: 2s

# Voice Assistant configuration
voice_assistant:
  id: va
  microphone: echo_microphone
  speaker: echo_speaker
  noise_suppression_level: 2
  auto_gain: 31dBFS
  volume_multiplier: 2.0
  silence_detection: true
  on_listening:
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        brightness: 50%
        effect: pulse
  on_stt_vad_end:
    - light.turn_on:
        id: led
        blue: 0%
        red: 0%
        green: 100%
        brightness: 50%
        effect: pulse
  on_tts_start:
    - light.turn_on:
        id: led
        blue: 0%
        red: 0%
        green: 100%
        brightness: 50%
        effect: none
  on_end:
    - delay: 100ms
    - wait_until:
        not:
          speaker.is_playing: echo_speaker
    - script.execute: reset_led
  on_error:
    - light.turn_on:
        id: led
        blue: 0%
        red: 100%
        green: 0%
        brightness: 100%
        effect: strobe
    - delay: 2s
    - script.execute: reset_led
  on_client_connected:
    - if:
        condition:
          switch.is_on: use_wake_word
        then:
          - voice_assistant.start_continuous:
          - script.execute: reset_led
  on_client_disconnected:
    - voice_assistant.stop:
    - light.turn_off: led

# Button configuration
binary_sensor:
  - platform: gpio
    pin:
      number: GPIO39
      inverted: true
    name: "Button"
    disabled_by_default: true
    entity_category: diagnostic
    id: echo_button
    on_multi_click:
      - timing:
          - ON for at least 250ms
          - OFF for at least 50ms
        then:
          - if:
              condition:
                switch.is_off: use_wake_word
              then:
                - if:
                    condition: voice_assistant.is_running
                    then:
                      - voice_assistant.stop:
                      - script.execute: reset_led
                    else:
                      - voice_assistant.start:
              else:
                - voice_assistant.stop
                - delay: 1s
                - script.execute: reset_led
                - script.wait: reset_led
                - voice_assistant.start_continuous:
      - timing:
          - ON for at least 10s
        then:
          - button.press: factory_reset_btn

# LED Strip configuration (single SK6812 LED)
light:
  - platform: esp32_rmt_led_strip
    id: led
    name: "LED"
    disabled_by_default: true
    entity_category: config
    pin: GPIO27
    default_transition_length: 0s
    chipset: SK6812
    num_leds: 1
    rgb_order: grb
    rmt_channel: 0
    effects:
      - pulse:
          transition_length: 250ms
          update_interval: 250ms
      - strobe:
          colors:
            - state: true
              brightness: 100%
              red: 100%
              green: 0%
              blue: 0%
              duration: 250ms
            - state: false
              duration: 250ms
      - rainbow:
          speed: 10
          width: 50

# Switches
switch:
  - platform: template
    name: "Use wake word"
    id: use_wake_word
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    on_turn_on:
      - lambda: id(va).set_use_wake_word(true);
      - if:
          condition:
            not:
              - voice_assistant.is_running
          then:
            - voice_assistant.start_continuous
      - script.execute: reset_led
    on_turn_off:
      - voice_assistant.stop
      - lambda: id(va).set_use_wake_word(false);
      - script.execute: reset_led

# Buttons
button:
  - platform: factory_reset
    id: factory_reset_btn
    name: "Factory reset"
    
  - platform: restart
    name: "Restart"
    entity_category: diagnostic

# Scripts
script:
  - id: reset_led
    then:
      - if:
          condition:
            switch.is_on: use_wake_word
          then:
            - light.turn_on:
                id: led
                blue: 100%
                red: 0%
                green: 0%
                brightness: 10%
                effect: none
          else:
            - light.turn_off: led