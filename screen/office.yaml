substitutions:
  SCREEN_MAIN: master
  SCREEN_ROOMS: rooms
  SCREEN_KITCHEN: sliders
  SCREEN_LED: led


number:
  - platform: template
    id: screen_brightness
    name: Screen Brightness
    min_value: 0
    max_value: 100
    step: 5
    initial_value: 100
    restore_value: true
    set_action:
      - lambda: |-
          if (!id(deck).get_inactivity())
            id(device).set_brightness(x);

  - platform: template
    id: inactive_screen_brightness
    name: Screen Inactive
    min_value: 0
    max_value: 100
    step: 5
    initial_value: 20
    restore_value: true
    set_action:
      - lambda: |-
          if (id(deck).get_inactivity())
            id(device).set_brightness(x);


sensor:
# Temperature Sensor
  - platform: homeassistant
    id: outdoor_temperature_sensor
    entity_id: sensor.outdoor_temperature


output:
  - platform: ledc
    pin: 10
    id: out_10


light:
  - platform: monochromatic
    id: dummy_light
    name: Dummy
    output: out_10



ha_deck:
  id: deck
  main_screen: ${SCREEN_MAIN}
  inactivity:
    period: 600 # seconds
    blank_screen: true
  on_inactivity_change:
    lambda:  |-
      if (x) {
        id(device).set_brightness(id(inactive_screen_brightness).state);
      } else {
        id(device).set_brightness(id(screen_brightness).state);
      }


  screens:
    - name: ${SCREEN_MAIN}
      widgets:

        # Time
        - type: value-card
          id: local_time
          position: 8, 8
          dimensions: 228x96
          text: "London (England)"
          enabled: return true;
          on_click:
            - logger.log: "Time clicked"
            
        # Favourite
        - type: button
          position: 8, 112
          text: "Favorite"
          icon: 󰋑
          visible: |-
            return true;

        # Temperature
        - type: value-card
          id: outdoor_temperature
          position: 126, 112
          text: Outside
          icon: 󰔏
          unit: °C
          enabled: return true;
          value: |-
            char buff[10] = "-";
            sprintf(buff, "%.1f", id(dummy_temperature_sensor).state);
            return std::string(buff);

        # Light
        - type: button
          position: 8, 216
          text: Dummy
          icon: 󰝩
          toggle: true
          enabled: return true;
          checked: |-
            return id(dummy_light).current_values.is_on();
          on_turn_on:
            - light.turn_on:
                id: dummy_light
                brightness: 100%
          on_turn_off:
            - light.turn_off:
                id: dummy_light
          # on_turn_on:
          #   homeassistant.service:
          #     service: light.turn_on
          #     data:
          #       entity_id: light.living_room_light
          # on_turn_off:
          #   homeassistant.service:
          #     service: light.turn_off
          #     data:
          #       entity_id: light.living_room_light

        # Screen Brightness
        - type: button
          position: 126, 216
          text: Brightness
          icon: 󰖨
          enabled: return true;
          on_click:
            lambda: id(deck).switch_screen("$SCREEN_LED");


    - name: ${SCREEN_LED}
      widgets:
        - type: button
          position: 0, 0
          dimensions: 48x320
          icon: 󰅁
          enabled: return true;
          on_click:
            - lambda: id(deck).switch_screen("$SCREEN_MAIN");

        - type: slider
          position: 200, 8
          dimensions: 100x304
          text: Brightness
          min: 0
          max: 100
          enabled: return true;
          value: return id(device).get_brightness();
          on_change:
            lambda: id(device).set_brightness(x);
